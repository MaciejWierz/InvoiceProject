#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Invoice_mw.SQLtoLINQ
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="mw_invoce_db")]
	public partial class InvoiceLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertItem_in_invoice(Item_in_invoice instance);
    partial void UpdateItem_in_invoice(Item_in_invoice instance);
    partial void DeleteItem_in_invoice(Item_in_invoice instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    #endregion
		
		public InvoiceLinqDataContext() : 
				base(global::Invoice_mw.Properties.Settings.Default.mw_invoce_dbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public InvoiceLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InvoiceLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InvoiceLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InvoiceLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Invoice> Invoice
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subject
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Item_in_invoice> Item_in_invoice
		{
			get
			{
				return this.GetTable<Item_in_invoice>();
			}
		}
		
		public System.Data.Linq.Table<Item> Item
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invoice")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FA_Number;
		
		private System.Nullable<System.DateTime> _Issue_Date;
		
		private System.Nullable<System.DateTime> _Due_Date;
		
		private string _Payment_Method;
		
		private System.Nullable<int> _Subject_From_Id;
		
		private System.Nullable<int> _Subject_For_Id;
		
		private EntitySet<Item_in_invoice> _Item_in_invoice;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Subject> _Subject1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFA_NumberChanging(string value);
    partial void OnFA_NumberChanged();
    partial void OnIssue_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnIssue_DateChanged();
    partial void OnDue_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnDue_DateChanged();
    partial void OnPayment_MethodChanging(string value);
    partial void OnPayment_MethodChanged();
    partial void OnSubject_From_IdChanging(System.Nullable<int> value);
    partial void OnSubject_From_IdChanged();
    partial void OnSubject_For_IdChanging(System.Nullable<int> value);
    partial void OnSubject_For_IdChanged();
    #endregion
		
		public Invoice()
		{
			this._Item_in_invoice = new EntitySet<Item_in_invoice>(new Action<Item_in_invoice>(this.attach_Item_in_invoice), new Action<Item_in_invoice>(this.detach_Item_in_invoice));
			this._Subject = default(EntityRef<Subject>);
			this._Subject1 = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FA_Number", DbType="VarChar(20)")]
		public string FA_Number
		{
			get
			{
				return this._FA_Number;
			}
			set
			{
				if ((this._FA_Number != value))
				{
					this.OnFA_NumberChanging(value);
					this.SendPropertyChanging();
					this._FA_Number = value;
					this.SendPropertyChanged("FA_Number");
					this.OnFA_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Issue_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Issue_Date
		{
			get
			{
				return this._Issue_Date;
			}
			set
			{
				if ((this._Issue_Date != value))
				{
					this.OnIssue_DateChanging(value);
					this.SendPropertyChanging();
					this._Issue_Date = value;
					this.SendPropertyChanged("Issue_Date");
					this.OnIssue_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Due_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Due_Date
		{
			get
			{
				return this._Due_Date;
			}
			set
			{
				if ((this._Due_Date != value))
				{
					this.OnDue_DateChanging(value);
					this.SendPropertyChanging();
					this._Due_Date = value;
					this.SendPropertyChanged("Due_Date");
					this.OnDue_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment_Method", DbType="VarChar(20)")]
		public string Payment_Method
		{
			get
			{
				return this._Payment_Method;
			}
			set
			{
				if ((this._Payment_Method != value))
				{
					this.OnPayment_MethodChanging(value);
					this.SendPropertyChanging();
					this._Payment_Method = value;
					this.SendPropertyChanged("Payment_Method");
					this.OnPayment_MethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject_From_Id", DbType="Int")]
		public System.Nullable<int> Subject_From_Id
		{
			get
			{
				return this._Subject_From_Id;
			}
			set
			{
				if ((this._Subject_From_Id != value))
				{
					if (this._Subject1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubject_From_IdChanging(value);
					this.SendPropertyChanging();
					this._Subject_From_Id = value;
					this.SendPropertyChanged("Subject_From_Id");
					this.OnSubject_From_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject_For_Id", DbType="Int")]
		public System.Nullable<int> Subject_For_Id
		{
			get
			{
				return this._Subject_For_Id;
			}
			set
			{
				if ((this._Subject_For_Id != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubject_For_IdChanging(value);
					this.SendPropertyChanging();
					this._Subject_For_Id = value;
					this.SendPropertyChanged("Subject_For_Id");
					this.OnSubject_For_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_Item_in_invoice", Storage="_Item_in_invoice", ThisKey="Id", OtherKey="Invoice_Id")]
		public EntitySet<Item_in_invoice> Item_in_invoice
		{
			get
			{
				return this._Item_in_invoice;
			}
			set
			{
				this._Item_in_invoice.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Invoice", Storage="_Subject", ThisKey="Subject_For_Id", OtherKey="Id", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Invoice.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Invoice.Add(this);
						this._Subject_For_Id = value.Id;
					}
					else
					{
						this._Subject_For_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Invoice1", Storage="_Subject1", ThisKey="Subject_From_Id", OtherKey="Id", IsForeignKey=true)]
		public Subject Subject1
		{
			get
			{
				return this._Subject1.Entity;
			}
			set
			{
				Subject previousValue = this._Subject1.Entity;
				if (((previousValue != value) 
							|| (this._Subject1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject1.Entity = null;
						previousValue.Invoice1.Remove(this);
					}
					this._Subject1.Entity = value;
					if ((value != null))
					{
						value.Invoice1.Add(this);
						this._Subject_From_Id = value.Id;
					}
					else
					{
						this._Subject_From_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Item_in_invoice(Item_in_invoice entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_Item_in_invoice(Item_in_invoice entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Address;
		
		private string _NIP;
		
		private string _Bank;
		
		private string _Back_Account;
		
		private EntitySet<Invoice> _Invoice;
		
		private EntitySet<Invoice> _Invoice1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnNIPChanging(string value);
    partial void OnNIPChanged();
    partial void OnBankChanging(string value);
    partial void OnBankChanged();
    partial void OnBank_AccountChanging(string value);
    partial void OnBank_AccountChanged();
    #endregion
		
		public Subject()
		{
			this._Invoice = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoice), new Action<Invoice>(this.detach_Invoice));
			this._Invoice1 = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoice1), new Action<Invoice>(this.detach_Invoice1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NIP", DbType="VarChar(10)")]
		public string NIP
		{
			get
			{
				return this._NIP;
			}
			set
			{
				if ((this._NIP != value))
				{
					this.OnNIPChanging(value);
					this.SendPropertyChanging();
					this._NIP = value;
					this.SendPropertyChanged("NIP");
					this.OnNIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bank", DbType="VarChar(10)")]
		public string Bank
		{
			get
			{
				return this._Bank;
			}
			set
			{
				if ((this._Bank != value))
				{
					this.OnBankChanging(value);
					this.SendPropertyChanging();
					this._Bank = value;
					this.SendPropertyChanged("Bank");
					this.OnBankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Back_Account", Storage="_Back_Account", DbType="VarChar(40)")]
		public string Bank_Account
		{
			get
			{
				return this._Back_Account;
			}
			set
			{
				if ((this._Back_Account != value))
				{
					this.OnBank_AccountChanging(value);
					this.SendPropertyChanging();
					this._Back_Account = value;
					this.SendPropertyChanged("Bank_Account");
					this.OnBank_AccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Invoice", Storage="_Invoice", ThisKey="Id", OtherKey="Subject_For_Id")]
		public EntitySet<Invoice> Invoice
		{
			get
			{
				return this._Invoice;
			}
			set
			{
				this._Invoice.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Invoice1", Storage="_Invoice1", ThisKey="Id", OtherKey="Subject_From_Id")]
		public EntitySet<Invoice> Invoice1
		{
			get
			{
				return this._Invoice1;
			}
			set
			{
				this._Invoice1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoice(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Invoice(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Invoice1(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Subject1 = this;
		}
		
		private void detach_Invoice1(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Subject1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item_in_invoice")]
	public partial class Item_in_invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Amount;
		
		private System.Nullable<int> _Item_Id;
		
		private System.Nullable<int> _Invoice_Id;
		
		private EntityRef<Invoice> _Invoice;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAmountChanging(System.Nullable<int> value);
    partial void OnAmountChanged();
    partial void OnItem_IdChanging(System.Nullable<int> value);
    partial void OnItem_IdChanged();
    partial void OnInvoice_IdChanging(System.Nullable<int> value);
    partial void OnInvoice_IdChanged();
    #endregion
		
		public Item_in_invoice()
		{
			this._Invoice = default(EntityRef<Invoice>);
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int")]
		public System.Nullable<int> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Id", DbType="Int")]
		public System.Nullable<int> Item_Id
		{
			get
			{
				return this._Item_Id;
			}
			set
			{
				if ((this._Item_Id != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItem_IdChanging(value);
					this.SendPropertyChanging();
					this._Item_Id = value;
					this.SendPropertyChanged("Item_Id");
					this.OnItem_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invoice_Id", DbType="Int")]
		public System.Nullable<int> Invoice_Id
		{
			get
			{
				return this._Invoice_Id;
			}
			set
			{
				if ((this._Invoice_Id != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoice_IdChanging(value);
					this.SendPropertyChanging();
					this._Invoice_Id = value;
					this.SendPropertyChanged("Invoice_Id");
					this.OnInvoice_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_Item_in_invoice", Storage="_Invoice", ThisKey="Invoice_Id", OtherKey="Id", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.Item_in_invoice.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.Item_in_invoice.Add(this);
						this._Invoice_Id = value.Id;
					}
					else
					{
						this._Invoice_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Item_in_invoice", Storage="_Item", ThisKey="Item_Id", OtherKey="Id", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Item_in_invoice.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Item_in_invoice.Add(this);
						this._Item_Id = value.Id;
					}
					else
					{
						this._Item_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Item_Type;
		
		private System.Nullable<int> _VAT;
		
		private System.Nullable<decimal> _Price_Netto;
		
		private EntitySet<Item_in_invoice> _Item_in_invoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnItem_TypeChanging(string value);
    partial void OnItem_TypeChanged();
    partial void OnVATChanging(System.Nullable<int> value);
    partial void OnVATChanged();
    partial void OnPrice_NettoChanging(System.Nullable<decimal> value);
    partial void OnPrice_NettoChanged();
    #endregion
		
		public Item()
		{
			this._Item_in_invoice = new EntitySet<Item_in_invoice>(new Action<Item_in_invoice>(this.attach_Item_in_invoice), new Action<Item_in_invoice>(this.detach_Item_in_invoice));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Type", DbType="VarChar(10)")]
		public string Item_Type
		{
			get
			{
				return this._Item_Type;
			}
			set
			{
				if ((this._Item_Type != value))
				{
					this.OnItem_TypeChanging(value);
					this.SendPropertyChanging();
					this._Item_Type = value;
					this.SendPropertyChanged("Item_Type");
					this.OnItem_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VAT", DbType="Int")]
		public System.Nullable<int> VAT
		{
			get
			{
				return this._VAT;
			}
			set
			{
				if ((this._VAT != value))
				{
					this.OnVATChanging(value);
					this.SendPropertyChanging();
					this._VAT = value;
					this.SendPropertyChanged("VAT");
					this.OnVATChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price_Netto", DbType="Money")]
		public System.Nullable<decimal> Price_Netto
		{
			get
			{
				return this._Price_Netto;
			}
			set
			{
				if ((this._Price_Netto != value))
				{
					this.OnPrice_NettoChanging(value);
					this.SendPropertyChanging();
					this._Price_Netto = value;
					this.SendPropertyChanged("Price_Netto");
					this.OnPrice_NettoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Item_in_invoice", Storage="_Item_in_invoice", ThisKey="Id", OtherKey="Item_Id")]
		public EntitySet<Item_in_invoice> Item_in_invoice
		{
			get
			{
				return this._Item_in_invoice;
			}
			set
			{
				this._Item_in_invoice.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Item_in_invoice(Item_in_invoice entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Item_in_invoice(Item_in_invoice entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
}
#pragma warning restore 1591
